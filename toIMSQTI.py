import sys, datetime
from BeautifulSoup import BeautifulSoup, CData, Tag
import xml.etree.ElementTree as ET 
from xml.etree import ElementTree
from xml.dom import minidom

randomoptiondata= ""

def getCorrectAnswer(): # getting ALL
	tree = ET.ElementTree(file='bridge-BETA.xml')
	global listscore 
	listscore = []
	global kon
	global thecorrectone 
	kon = 0
	for elem in tree.iter('questionanswer'):
		kon = kon + 1
		dictkon = elem.attrib
		if dictkon['score'] == '100':
			thecorrectone = 'answer_'+str(kon)
		listscore.append(dictkon['score'])
	#print listscore

def getQuestionData(): #sub class for getting All Question - TEXT. DONE
	global qtext
	global randomoptiondata

	tree = ET.ElementTree(file='bridge-BETA.xml')
	for elem in tree.iter('questiondata'):
		qtext = elem.find('questiontext').text
		randomoptiondata = elem.find('randomoption').text
		if randomoptiondata == 'TRUE':
			randomoptiondata = 'Random'

def getQuestionAnswer():
	tree = ET.ElementTree(file='bridge-BETA.xml')
	
	#global itung
	global thecorrectone 
	itung = 0
	for elem in tree.iter('questionanswer'):
		elem.attrib



def prettify(elem): #Use for writeBridgexml
	
	rough_string = ElementTree.tostring(elem, 'utf-8')
	reparsed = minidom.parseString(rough_string)
	return reparsed.toprettyxml(indent="  ")


def writeIMSQTIxml(): #For write to BrideXML DONE
	from xml.etree.ElementTree import Element, SubElement, Comment
	#from ElementTree_pretty import prettify

	#skrg = str(datetime.datetime.now())
	getSecond = datetime.datetime.now()
	quizTitleSecond = str(getSecond.microsecond)
	theIMSQTIXMLFileName = 'IMSQTI'+str(getSecond)+'.xml'
	
	questioninterop = Element('questioninterop')

	comment = Comment('This is IMSQTI XML generated by @xunilresu')
	questioninterop.append(comment)

	section = SubElement(questioninterop, 'section', ident='EXO_1', title='MyQuizExample'+quizTitleSecond)
	
	#getQuestionType()
	presentation_material = SubElement(section, 'presentation_material')
	flow_mat = SubElement(presentation_material, 'flow_mat')
	material = SubElement(flow_mat, 'material')
	mattext = SubElement(material, 'mattext')
	#mattext.text = "<![CDATA[<p>&nbsp;This Quiz is give 15% of total score</p>]]>"
	mattext.text = "ID"


	selection_ordering = SubElement(section, 'selection_ordering')
	selection = SubElement(selection_ordering, 'selection')
	selection_number = SubElement(selection, 'selection_number')
	selection_number.text =  '-1'

	getQuestionData()
	order = SubElement(selection_ordering, 'order', order_type=randomoptiondata)

	getQuestionData()
	assessmentItem = SubElement(section, 'assessmentItem', xmlns='http://www.imsglobal.org/xsd/imsqti_v2p1', identifier='QST_1', title=qtext)

	responseDeclaration = SubElement(assessmentItem, 'responseDeclaration', cardinality='single', identifier='QST_1', baseType='identifier')

	correctResponse = SubElement(responseDeclaration, 'correctResponse')

	getCorrectAnswer()
	value = SubElement(correctResponse, 'value')
	value.text = thecorrectone

	mapping = SubElement(responseDeclaration,'mapping')

	#getCorrectAnswer()
	mapEntryListTag = [
		SubElement(mapping,'mapEntry', mapKey='answer_'+str(i), mappedValue=listscore[i-1])
		#questionanswer[i].text = 'This place for question', i
		for i in xrange(1,5)
		]

	itemBody = SubElement(assessmentItem, 'itemBody')

	choiceInteraction = SubElement(itemBody, 'choiceInteraction', responseIdentifier = 'QST_1')

	prompt = SubElement(choiceInteraction, 'prompt')
	prompt.text = qtext

	simpleChoiceListTag = [
		SubElement(choiceInteraction,'simpleChoice', identifier='answer_'+str(i), fixed="false")
		for i in xrange(1,5)
		]	

	

	tree = ET.ElementTree(file='bridge-BETA.xml')
	tempkon = 0
	for elem in tree.iter('questionanswer'):
		tempkon = tempkon + 1
		dataans = elem.attrib
		simpleChoiceListTag[tempkon-1].text = dataans['text']

	responseProcessing = SubElement(assessmentItem, 'responseProcessing', template="http://www.imsglobal.org/question/qti_v2p1/rptemplates/map_correct")
	
	

	temp = sys.stdout
	sys.stdout = open(theIMSQTIXMLFileName,'w')
	print prettify(questioninterop)
	sys.stdout.close() 
	sys.stdout = temp	
	
	print 'Export Successfull, Filename = '+theIMSQTIXMLFileName


writeIMSQTIxml()
#getQuestionText()
#getQuestionAnswer()
#getCorrectAnswer()
